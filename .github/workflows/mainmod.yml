name: Build IPQ807x
on: [push]

jobs:
    build:
        name: Prepare and build IPQ807x generic images
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Update and install feeds
              run: |
                ./scripts/feeds update -a
                ./scripts/feeds install -a
            - name: Generate config for IPQ807x Generic
              run: |
                echo "CONFIG_TARGET_ipq807x=y\n" > .config
                echo "CONFIG_TARGET_ipq807x_generic=y\n" >> .config
                echo "CONFIG_TARGET_MULTI_PROFILE=y\n" >> .config
                echo "CONFIG_TARGET_ALL_PROFILES=y\n" >> .config
                echo "CONFIG_TARGET_PER_DEVICE_ROOTFS=y\n" >> .config
                echo "CONFIG_TARGET_ROOTFS_INITRAMFS=y\n" >> .config
                echo "CONFIG_TARGET_INITRAMFS_COMPRESSION_ZSTD=y\n" >> .config
                echo "CONFIG_PACKAGE_luci=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-qca-nss-dp=y\n" >> .config
                echo "CONFIG_PACKAGE_qca-ssdk-shell=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-tun=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-openvpn=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_openvpn-openssl=y\n" >> .config
                echo "CONFIG_PACKAGE_wireguard-tools=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-wireguard=y\n" >> .config
                # Apps
                echo "CONFIG_PACKAGE_luci-app-easymesh=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-guest-wifi=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-ntpc=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-qos=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-ttyd=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-vlmcsd=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-wifischedule=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-openvpn=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-openvpn-server=y\n" >> .config
                # IPTV
                echo "CONFIG_PACKAGE_luci-app-udpxy=y\n" >> .config
                echo "CONFIG_PACKAGE_omcproxy=y\n" >> .config
                echo "CONFIG_PACKAGE_bird1-ipv4=y\n" >> .config
                echo "CONFIG_PACKAGE_bird1-ipv4-uci=y\n" >> .config
                # Speedtest
                echo "CONFIG_PACKAGE_speedtest-netperf=y\n" >> .config
                # Extra protocol
                echo "CONFIG_PACKAGE_luci-proto-wireguard=y\n" >> .config
                make defconfig
            - name: Download package sources
              run: make download V=s

            - name: Build tools
              run: |
                make tools/install -j$(nproc) V=s || \
                make tools/install V=s
            - name: Build toolchain
              run: |
                make toolchain/install -j$(nproc) V=s || \
                make toolchain/install V=s
            - name: Build target images
              run: |
                make -j$(nproc) V=s || \
                make V=s
            - name: TAR output
              run: tar -cvf ipq807xx-images.tar bin/targets/ipq807x/generic

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                name: ipq807x-images
                path: ipq807xx-images.tar

    release:
          name: Make a release
          runs-on: ubuntu-latest
          needs: build

          steps:
            - name: Download the image artifacts
              uses: actions/download-artifact@v2
              with:
                name: ipq807x-images

            - name: Extract the image artifacts
              run: tar xf ipq807xx-images.tar

            - name: Create a release
              uses: "marvinpinto/action-automatic-releases@latest"
              with:
                repo_token: "${{ secrets.GITHUB_TOKEN }}"
                prerelease: true
                title: "Updated prebuilt images"
                automatic_release_tag: "ipq807x-latest"
                files: bin/targets/ipq807x/generic/*
